// <auto-generated />
using System;
using Backend.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230307174843_GroupsFix")]
    partial class GroupsFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodeId"));

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("CodeId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("Backend.Models.EnergyProduction", b =>
                {
                    b.Property<int>("EnergyProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnergyProductionId"));

                    b.Property<string>("CurrentProduction")
                        .HasColumnType("text");

                    b.Property<DateTime>("CurrentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DailyProduction")
                        .HasColumnType("text");

                    b.Property<int>("PowerplantId")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("EnergyProductionId");

                    b.HasIndex("PowerplantId");

                    b.ToTable("EnergyProductions");
                });

            modelBuilder.Entity("Backend.Models.Indication", b =>
                {
                    b.Property<int>("IndicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IndicationId"));

                    b.Property<float>("Azimuth")
                        .HasColumnType("real");

                    b.Property<float>("Elevation")
                        .HasColumnType("real");

                    b.Property<int>("PowerplantId")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("IndicationId");

                    b.HasIndex("PowerplantId")
                        .IsUnique();

                    b.ToTable("Indications");
                });

            modelBuilder.Entity("Backend.Models.Powerplant", b =>
                {
                    b.Property<int>("PowerplantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PowerplantId"));

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("ConnectionStatus")
                        .HasColumnType("integer");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PowerplantGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("PowerplantType")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Tariff")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PowerplantId");

                    b.HasIndex("PowerplantGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Powerplants");
                });

            modelBuilder.Entity("Backend.Models.PowerplantGroup", b =>
                {
                    b.Property<int>("PowerplantGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PowerplantGroupId"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PowerplantGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("PowerplantGroups");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.EnergyProduction", b =>
                {
                    b.HasOne("Backend.Models.Powerplant", "Powerplant")
                        .WithMany("EnergyProductions")
                        .HasForeignKey("PowerplantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Powerplant");
                });

            modelBuilder.Entity("Backend.Models.Indication", b =>
                {
                    b.HasOne("Backend.Models.Powerplant", "Powerplant")
                        .WithOne("Indication")
                        .HasForeignKey("Backend.Models.Indication", "PowerplantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Powerplant");
                });

            modelBuilder.Entity("Backend.Models.Powerplant", b =>
                {
                    b.HasOne("Backend.Models.PowerplantGroup", "PowerplantGroup")
                        .WithMany("Powerplants")
                        .HasForeignKey("PowerplantGroupId");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Powerplants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PowerplantGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.PowerplantGroup", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("PowerplantGroups")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Powerplant", b =>
                {
                    b.Navigation("EnergyProductions");

                    b.Navigation("Indication");
                });

            modelBuilder.Entity("Backend.Models.PowerplantGroup", b =>
                {
                    b.Navigation("Powerplants");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("PowerplantGroups");

                    b.Navigation("Powerplants");
                });
#pragma warning restore 612, 618
        }
    }
}
